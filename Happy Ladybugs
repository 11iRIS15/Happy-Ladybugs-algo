using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections;
using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text.RegularExpressions;
using System.Text;
using System;

class Result
{

    /*
     * Complete the 'happyLadybugs' function below.
     *
     * The function is expected to return a STRING.
     * The function accepts STRING b as parameter.
     */

    public static string happyLadybugs(string b)
    {
         Dictionary<char, int> freq = new Dictionary<char, int>();
    foreach (char c in b)
    {
        if (c != '_') // ignore empty cells for counting
        {
            if (!freq.ContainsKey(c))
                freq[c] = 0;
            freq[c]++;
        }
    }

    // If there's any ladybug with only 1 count, impossible to make happy
    if (freq.Values.Any(v => v == 1))
        return "NO";

    // If there is at least one empty cell, we can rearrange
    if (b.Contains('_'))
        return "YES";

    // Check if already happy (no adjacent different ladybugs)
    for (int i = 1; i < b.Length - 1; i++)
    {
        if (b[i] != b[i - 1] && b[i] != b[i + 1])
            return "NO";
    }

    return "YES";

    }

}

class Solution
{
    public static void Main(string[] args)
    {
        TextWriter textWriter = new StreamWriter(@System.Environment.GetEnvironmentVariable("OUTPUT_PATH"), true);

        int g = Convert.ToInt32(Console.ReadLine().Trim());

        for (int gItr = 0; gItr < g; gItr++)
        {
            int n = Convert.ToInt32(Console.ReadLine().Trim());

            string b = Console.ReadLine();

            string result = Result.happyLadybugs(b);

            textWriter.WriteLine(result);
        }

        textWriter.Flush();
        textWriter.Close();
    }
}
